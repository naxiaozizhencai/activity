// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	anwserFieldNames          = builder.RawFieldNames(&Anwser{})
	anwserRows                = strings.Join(anwserFieldNames, ",")
	anwserRowsExpectAutoSet   = strings.Join(stringx.Remove(anwserFieldNames, "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	anwserRowsWithPlaceHolder = strings.Join(stringx.Remove(anwserFieldNames, "`anwser_id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheAnwserAnwserIdPrefix = "cache:anwser:anwserId:"
)

type (
	anwserModel interface {
		Insert(ctx context.Context, data *Anwser) (sql.Result, error)
		FindOne(ctx context.Context, anwserId int64) (*Anwser, error)
		Update(ctx context.Context, data *Anwser) error
		Delete(ctx context.Context, anwserId int64) error
	}

	defaultAnwserModel struct {
		sqlc.CachedConn
		table string
	}

	Anwser struct {
		AnwserId     int64          `db:"anwser_id"`      // 问题id
		AnwserName   sql.NullString `db:"anwser_name"`    // 关卡名称
		LastAnswerId int64          `db:"last_answer_id"` // 上一个关卡id
		StartTime    time.Time      `db:"start_time"`     // 开启时间
		EndTime      time.Time      `db:"end_time"`       // 结束时间
		ItemId       sql.NullString `db:"item_id"`        // 道具id
		ItemNum      sql.NullInt64  `db:"item_num"`       // 道具数量
		Result       string         `db:"result"`         // 结果
		AddTime      time.Time      `db:"add_time"`       // 添加时间
	}
)

func newAnwserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAnwserModel {
	return &defaultAnwserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`anwser`",
	}
}

func (m *defaultAnwserModel) Delete(ctx context.Context, anwserId int64) error {
	anwserAnwserIdKey := fmt.Sprintf("%s%v", cacheAnwserAnwserIdPrefix, anwserId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `anwser_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, anwserId)
	}, anwserAnwserIdKey)
	return err
}

func (m *defaultAnwserModel) FindOne(ctx context.Context, anwserId int64) (*Anwser, error) {
	anwserAnwserIdKey := fmt.Sprintf("%s%v", cacheAnwserAnwserIdPrefix, anwserId)
	var resp Anwser
	err := m.QueryRowCtx(ctx, &resp, anwserAnwserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `anwser_id` = ? limit 1", anwserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, anwserId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnwserModel) Insert(ctx context.Context, data *Anwser) (sql.Result, error) {
	anwserAnwserIdKey := fmt.Sprintf("%s%v", cacheAnwserAnwserIdPrefix, data.AnwserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, anwserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AnwserId, data.AnwserName, data.LastAnswerId, data.StartTime, data.EndTime, data.ItemId, data.ItemNum, data.Result, data.AddTime)
	}, anwserAnwserIdKey)
	return ret, err
}

func (m *defaultAnwserModel) Update(ctx context.Context, data *Anwser) error {
	anwserAnwserIdKey := fmt.Sprintf("%s%v", cacheAnwserAnwserIdPrefix, data.AnwserId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `anwser_id` = ?", m.table, anwserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AnwserName, data.LastAnswerId, data.StartTime, data.EndTime, data.ItemId, data.ItemNum, data.Result, data.AddTime, data.AnwserId)
	}, anwserAnwserIdKey)
	return err
}

func (m *defaultAnwserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAnwserAnwserIdPrefix, primary)
}

func (m *defaultAnwserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `anwser_id` = ? limit 1", anwserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAnwserModel) tableName() string {
	return m.table
}
