// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	answerLogFieldNames          = builder.RawFieldNames(&AnswerLog{})
	answerLogRows                = strings.Join(answerLogFieldNames, ",")
	answerLogRowsExpectAutoSet   = strings.Join(stringx.Remove(answerLogFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	answerLogRowsWithPlaceHolder = strings.Join(stringx.Remove(answerLogFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"
)

type (
	answerLogModel interface {
		Insert(ctx context.Context, data *AnswerLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AnswerLog, error)
		Update(ctx context.Context, data *AnswerLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAnswerLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AnswerLog struct {
		Id           int64     `db:"id"`
		Uid          string    `db:"uid"`
		Languge      string    `db:"languge"`
		AnswerId     int64     `db:"answer_id"`
		UserResult   string    `db:"user_result"`
		AnswerResult string    `db:"answer_result"`
		LogTime      time.Time `db:"log_time"`
	}
)

func newAnswerLogModel(conn sqlx.SqlConn) *defaultAnswerLogModel {
	return &defaultAnswerLogModel{
		conn:  conn,
		table: "`answer_log`",
	}
}

func (m *defaultAnswerLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAnswerLogModel) FindOne(ctx context.Context, id int64) (*AnswerLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", answerLogRows, m.table)
	var resp AnswerLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnswerLogModel) Insert(ctx context.Context, data *AnswerLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, answerLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Languge, data.AnswerId, data.UserResult, data.AnswerResult, data.LogTime)
	return ret, err
}

func (m *defaultAnswerLogModel) Update(ctx context.Context, data *AnswerLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, answerLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Languge, data.AnswerId, data.UserResult, data.AnswerResult, data.LogTime, data.Id)
	return err
}

func (m *defaultAnswerLogModel) tableName() string {
	return m.table
}
