// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	anwserResultFieldNames          = builder.RawFieldNames(&AnwserResult{})
	anwserResultRows                = strings.Join(anwserResultFieldNames, ",")
	anwserResultRowsExpectAutoSet   = strings.Join(stringx.Remove(anwserResultFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	anwserResultRowsWithPlaceHolder = strings.Join(stringx.Remove(anwserResultFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheAnwserResultIdPrefix              = "cache:anwserResult:id:"
	cacheAnwserResultGameUidAnswerIdPrefix = "cache:anwserResult:gameUid:answerId:"
)

type (
	anwserResultModel interface {
		Insert(ctx context.Context, data *AnwserResult) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AnwserResult, error)
		FindOneByGameUidAnswerId(ctx context.Context, gameUid string, answerId int64) (*AnwserResult, error)
		Update(ctx context.Context, data *AnwserResult) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAnwserResultModel struct {
		sqlc.CachedConn
		table string
	}

	AnwserResult struct {
		Id       int64        `db:"id"`        // 自增id
		GameUid  string       `db:"game_uid"`  // 游戏uid
		AnswerId int64        `db:"answer_id"` // 题目id
		Status   int64        `db:"status"`    // 0失败1成功
		AddTime  sql.NullTime `db:"add_time"`  // 添加时间
	}
)

func newAnwserResultModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAnwserResultModel {
	return &defaultAnwserResultModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`anwser_result`",
	}
}

func (m *defaultAnwserResultModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	anwserResultGameUidAnswerIdKey := fmt.Sprintf("%s%v:%v", cacheAnwserResultGameUidAnswerIdPrefix, data.GameUid, data.AnswerId)
	anwserResultIdKey := fmt.Sprintf("%s%v", cacheAnwserResultIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, anwserResultGameUidAnswerIdKey, anwserResultIdKey)
	return err
}

func (m *defaultAnwserResultModel) FindOne(ctx context.Context, id int64) (*AnwserResult, error) {
	anwserResultIdKey := fmt.Sprintf("%s%v", cacheAnwserResultIdPrefix, id)
	var resp AnwserResult
	err := m.QueryRowCtx(ctx, &resp, anwserResultIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", anwserResultRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnwserResultModel) FindOneByGameUidAnswerId(ctx context.Context, gameUid string, answerId int64) (*AnwserResult, error) {
	anwserResultGameUidAnswerIdKey := fmt.Sprintf("%s%v:%v", cacheAnwserResultGameUidAnswerIdPrefix, gameUid, answerId)
	var resp AnwserResult
	err := m.QueryRowIndexCtx(ctx, &resp, anwserResultGameUidAnswerIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `game_uid` = ? and `answer_id` = ? limit 1", anwserResultRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, gameUid, answerId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnwserResultModel) Insert(ctx context.Context, data *AnwserResult) (sql.Result, error) {
	anwserResultGameUidAnswerIdKey := fmt.Sprintf("%s%v:%v", cacheAnwserResultGameUidAnswerIdPrefix, data.GameUid, data.AnswerId)
	anwserResultIdKey := fmt.Sprintf("%s%v", cacheAnwserResultIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, anwserResultRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GameUid, data.AnswerId, data.Status, data.AddTime)
	}, anwserResultGameUidAnswerIdKey, anwserResultIdKey)
	return ret, err
}

func (m *defaultAnwserResultModel) Update(ctx context.Context, newData *AnwserResult) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	anwserResultGameUidAnswerIdKey := fmt.Sprintf("%s%v:%v", cacheAnwserResultGameUidAnswerIdPrefix, data.GameUid, data.AnswerId)
	anwserResultIdKey := fmt.Sprintf("%s%v", cacheAnwserResultIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, anwserResultRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.GameUid, newData.AnswerId, newData.Status, newData.AddTime, newData.Id)
	}, anwserResultGameUidAnswerIdKey, anwserResultIdKey)
	return err
}

func (m *defaultAnwserResultModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAnwserResultIdPrefix, primary)
}

func (m *defaultAnwserResultModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", anwserResultRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAnwserResultModel) tableName() string {
	return m.table
}
