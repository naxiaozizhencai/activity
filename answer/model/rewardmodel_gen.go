// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rewardFieldNames          = builder.RawFieldNames(&Reward{})
	rewardRows                = strings.Join(rewardFieldNames, ",")
	rewardRowsExpectAutoSet   = strings.Join(stringx.Remove(rewardFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	rewardRowsWithPlaceHolder = strings.Join(stringx.Remove(rewardFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheRewardIdPrefix = "cache:reward:id:"
)

type (
	rewardModel interface {
		Insert(ctx context.Context, data *Reward) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Reward, error)
		Update(ctx context.Context, data *Reward) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRewardModel struct {
		sqlc.CachedConn
		table string
	}

	Reward struct {
		Id       int64        `db:"id"`        // 自增id
		GameUid  string       `db:"game_uid"`  // 游戏uid
		AnswerId int64        `db:"answer_id"` // 题目id
		ItemId   string       `db:"item_id"`   // 道具id
		Nums     int64        `db:"nums"`      // 数量
		Status   int64        `db:"status"`    // 0失败1成功
		AddTime  sql.NullTime `db:"add_time"`  // 添加时间
	}
)

func newRewardModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultRewardModel {
	return &defaultRewardModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`reward`",
	}
}

func (m *defaultRewardModel) Delete(ctx context.Context, id int64) error {
	rewardIdKey := fmt.Sprintf("%s%v", cacheRewardIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, rewardIdKey)
	return err
}

func (m *defaultRewardModel) FindOne(ctx context.Context, id int64) (*Reward, error) {
	rewardIdKey := fmt.Sprintf("%s%v", cacheRewardIdPrefix, id)
	var resp Reward
	err := m.QueryRowCtx(ctx, &resp, rewardIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rewardRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRewardModel) Insert(ctx context.Context, data *Reward) (sql.Result, error) {
	rewardIdKey := fmt.Sprintf("%s%v", cacheRewardIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, rewardRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GameUid, data.AnswerId, data.ItemId, data.Nums, data.Status, data.AddTime)
	}, rewardIdKey)
	return ret, err
}

func (m *defaultRewardModel) Update(ctx context.Context, data *Reward) error {
	rewardIdKey := fmt.Sprintf("%s%v", cacheRewardIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rewardRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GameUid, data.AnswerId, data.ItemId, data.Nums, data.Status, data.AddTime, data.Id)
	}, rewardIdKey)
	return err
}

func (m *defaultRewardModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRewardIdPrefix, primary)
}

func (m *defaultRewardModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rewardRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRewardModel) tableName() string {
	return m.table
}
